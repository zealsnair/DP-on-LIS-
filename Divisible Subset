#include <bits/stdc++.h>
using namespace std;

// Memoization Approach
int f(int ind, int prev_ind, int n, vector<int>& arr, vector<vector<int>>& dp) {
    if (ind == n) return 0; // Base Case

    if (dp[ind][prev_ind + 1] != -1) return dp[ind][prev_ind + 1];

    int len = f(ind + 1, prev_ind, n, arr, dp); // Not take

    if (prev_ind == -1 || arr[ind] % arr[prev_ind] == 0) {
        len = max(len, 1 + f(ind + 1, ind, n, arr, dp)); // Take
    }

    return dp[ind][prev_ind + 1] = len;
}

// Tabulation Approach
vector<int> tabulation(vector<int>& arr, int n) {
    vector<int> dp(n, 1), hash(n);
    int maxi = 1, lastIndex = 0;

    sort(arr.begin(), arr.end()); // Sorting ensures LIS-like structure

    for (int i = 0; i < n; ++i) {
        hash[i] = i;
        for (int prev = 0; prev < i; ++prev) {
            if (arr[i] % arr[prev] == 0 && dp[i] < 1 + dp[prev]) {
                dp[i] = 1 + dp[prev];
                hash[i] = prev;
            }
        }
        if (maxi < dp[i]) {
            maxi = dp[i];
            lastIndex = i;
        }
    }

    vector<int> ans;
    ans.push_back(arr[lastIndex]);
    while (hash[lastIndex] != lastIndex) {
        lastIndex = hash[lastIndex];
        ans.push_back(arr[lastIndex]);
    }

    reverse(ans.begin(), ans.end());
    return ans;
}

// Space Optimized Approach (Using only 1D DP)
vector<int> spaceOptimized(vector<int>& arr, int n) {
    vector<int> dp(n, 1), hash(n);
    int maxi = 1, lastIndex = 0;

    sort(arr.begin(), arr.end());

    for (int i = 0; i < n; ++i) {
        hash[i] = i;
        for (int prev = 0; prev < i; ++prev) {
            if (arr[i] % arr[prev] == 0 && dp[i] < 1 + dp[prev]) {
                dp[i] = 1 + dp[prev];
                hash[i] = prev;
            }
        }
        if (maxi < dp[i]) {
            maxi = dp[i];
            lastIndex = i;
        }
    }

    vector<int> ans;
    ans.push_back(arr[lastIndex]);
    while (hash[lastIndex] != lastIndex) {
        lastIndex = hash[lastIndex];
        ans.push_back(arr[lastIndex]);
    }

    reverse(ans.begin(), ans.end());
    return ans;
}

// Main Function for User Input
int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter array elements: ";
    for (int i = 0; i < n; i++) cin >> arr[i];

    // Memoization Approach
    vector<vector<int>> dp(n, vector<int>(n + 1, -1));
    cout << "Largest Divisible Subset (Memoization): ";
    vector<int> memResult = tabulation(arr, n);
    for (int num : memResult) cout << num << " ";
    cout << endl;

    // Tabulation Approach
    cout << "Largest Divisible Subset (Tabulation): ";
    vector<int> tabResult = tabulation(arr, n);
    for (int num : tabResult) cout << num << " ";
    cout << endl;

    // Space-Optimized Approach
    cout << "Largest Divisible Subset (Space Optimized): ";
    vector<int> spaceResult = spaceOptimized(arr, n);
    for (int num : spaceResult) cout << num << " ";
    cout << endl;

    return 0;
}
