#include <bits/stdc++.h>
using namespace std;

// Memoization Approach
int f(int ind, int prev_ind, int n, vector<int> &nums, vector<vector<int>> &dp) {
    if (ind == n) return 0; // Base Case

    if (dp[ind][prev_ind + 1] != -1) return dp[ind][prev_ind + 1];

    int len = f(ind + 1, prev_ind, n, nums, dp); // Not take

    if (prev_ind == -1 || nums[ind] > nums[prev_ind]) {
        len = max(len, 1 + f(ind + 1, ind, n, nums, dp)); // Take
    }

    return dp[ind][prev_ind + 1] = len;
}

// Tabulation Approach
int tabulation(int n, vector<int> &nums) {
    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));

    for (int ind = n - 1; ind >= 0; --ind) {
        for (int prev_ind = ind - 1; prev_ind >= -1; --prev_ind) {
            int len = dp[ind + 1][prev_ind + 1];

            if (prev_ind == -1 || nums[ind] > nums[prev_ind]) {
                len = max(len, 1 + dp[ind + 1][ind + 1]);
            }

            dp[ind][prev_ind + 1] = len;
        }
    }

    return dp[0][0]; // dp[0][-1+1]
}

// Space-Optimized Approach
int spaceOptimized(int n, vector<int> &nums) {
    vector<int> next(n + 1, 0), curr(n + 1, 0);

    for (int ind = n - 1; ind >= 0; --ind) {
        for (int prev_ind = ind - 1; prev_ind >= -1; --prev_ind) {
            int len = next[prev_ind + 1];

            if (prev_ind == -1 || nums[ind] > nums[prev_ind]) {
                len = max(len, 1 + next[ind + 1]);
            }

            curr[prev_ind + 1] = len;
        }
        next = curr;
    }

    return next[0];
}

// Optimized DP Approach (O(n^2))
int optimizedDP(int n, vector<int> &nums) {
    vector<int> dp(n, 1);
    int maxi = 1;

    for (int ind = 0; ind < n; ++ind) {
        for (int prev_ind = 0; prev_ind < ind; ++prev_ind) {
            if (nums[prev_ind] < nums[ind]) {
                dp[ind] = max(dp[ind], 1 + dp[prev_ind]);
            }
        }
        maxi = max(maxi, dp[ind]);
    }

    return maxi;
}

// Main Function for User Input
int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;

    vector<int> nums(n);
    cout << "Enter array elements: ";
    for (int i = 0; i < n; i++) cin >> nums[i];

    // Memoization Approach
    vector<vector<int>> dp(n, vector<int>(n + 1, -1));
    cout << "Length of LIS (Memoization): " << f(0, -1, n, nums, dp) << endl;

    // Tabulation Approach
    cout << "Length of LIS (Tabulation): " << tabulation(n, nums) << endl;

    // Space-Optimized Approach
    cout << "Length of LIS (Space Optimized): " << spaceOptimized(n, nums) << endl;

    // Optimized DP Approach
    cout << "Length of LIS (Optimized DP): " << optimizedDP(n, nums) << endl;

    return 0;
}
